{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","action.js","constants.js","reducers.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0edd69a4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 bg-yellow-400 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React ,{Component} from 'react';\r\n\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError:true\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> OOOOOPPSSS... Something is not working </h1>\r\n\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport {setSearchField,requestRobots} from '../action';\nimport {connect } from 'react-redux';\n\n\nconst mapStateToProps = state =>{\n\treturn {\n\t\tsearchField:state.searchRobots.searchField,\n\t\trobots:state.requestRobots.robots\n\t}\n}\nconst mapDispatchToProps = (dispatch) => {\n\treturn{\n\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\tonRequestRobots:()=> dispatch(requestRobots())\n}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\n\trender() {\n\t\t\n\t\tconst { searchField , onSearchChange , robots , isPending }= this.props;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPending ?\n\t\t\t<h1>Loading</h1> :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD ,\r\n          REQUEST_ROBOTS_PENDING,\r\n          REQUEST_ROBOTS_SUCCESS,\r\n          REQUEST_ROBOTS_FAILED\r\n\r\n       } from './constants.js';\r\n\r\n\r\nexport const setSearchField = (text)=>({\r\n\ttype:CHANGE_SEARCH_FIELD,\r\n\tpayload:text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response=> response.json())\r\n\t\t\t.then(users => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:users}))\r\n\t\t\t.catch(error => dispatch ({ type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n} ","export const CHANGE_SEARCH_FIELD =\"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING =\"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS =\"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED =\"REQUEST_ROBOTS_FAILED\";","import { CHANGE_SEARCH_FIELD ,\r\n          REQUEST_ROBOTS_PENDING,\r\n          REQUEST_ROBOTS_SUCCESS,\r\n          REQUEST_ROBOTS_FAILED\r\n\r\n       } from './constants.js';\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: \" \"\r\n}\r\nconst initialStateRobots ={\r\n\tisPending:true,\r\n\trobots:[],\r\n\terror:\"\"\r\n}\r\n\r\nexport const searchRobots =(state=initialStateSearch,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t    return Object.assign({},state,{searchField:action.payload});\r\n\t\t default :\r\n\t\t    return state;\r\n\t}\r\n}\r\n\r\n\r\nexport const requestRobots =(state =initialStateRobots,action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t      return Object.assign({},state,{isPending:true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t       return Object.assign({},state,{robots : action.payload,isPending:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t       return Object.assign({},state,{error:action.payload,isPending:false})\r\n\t\tdefault:\r\n\t\t   return state;\r\n\t}    \r\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { createStore , applyMiddleware , combineReducers} from 'redux';\nimport { searchRobots ,requestRobots } from './reducers';\nimport { Provider }  from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst logger =createLogger();\nconst store =\n         createStore(rootReducer,\n          applyMiddleware( thunkMiddleware, logger)\n          );\n\nReactDOM.render(\n\t             <Provider store ={store}>\n                    <App />\n                 </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}